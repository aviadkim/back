name: Deploy to AWS Elastic Beanstalk
on:
  push:
    branches: [ master ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Generate deployment package
        run: zip -r deploy.zip . -x "*.git*" "venv/*" "__pycache__/*"
      
      - name: Upload deployment package to S3
        id: upload
        run: |
          # Create a timestamp for version uniqueness
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          VERSION_LABEL="financial-docs-${TIMESTAMP}-${{ github.sha }}"
          echo "VERSION_LABEL=${VERSION_LABEL}" >> $GITHUB_OUTPUT
          
          # Create S3 bucket if it doesn't exist (will fail silently if bucket exists)
          aws s3 mb s3://elasticbeanstalk-${{ secrets.AWS_REGION }}-${{ github.repository_owner }} || true
          
          # Upload the zip file
          aws s3 cp deploy.zip s3://elasticbeanstalk-${{ secrets.AWS_REGION }}-${{ github.repository_owner }}/${VERSION_LABEL}.zip
          
          echo "Uploaded deployment package to S3"
      
      - name: Create Elastic Beanstalk application if it doesn't exist
        run: |
          if ! aws elasticbeanstalk describe-applications --application-names financial-docs &> /dev/null; then
            echo "Creating Elastic Beanstalk application 'financial-docs'"
            aws elasticbeanstalk create-application --application-name financial-docs --description "Financial Documents Analysis Application"
          else
            echo "Application 'financial-docs' already exists"
          fi
      
      - name: Create application version
        run: |
          aws elasticbeanstalk create-application-version \
            --application-name financial-docs \
            --version-label ${{ steps.upload.outputs.VERSION_LABEL }} \
            --source-bundle S3Bucket=elasticbeanstalk-${{ secrets.AWS_REGION }}-${{ github.repository_owner }},S3Key=${{ steps.upload.outputs.VERSION_LABEL }}.zip \
            --auto-create-application
      
      - name: Get available Docker solution stack
        id: stack
        run: |
          STACK=$(aws elasticbeanstalk list-available-solution-stacks --query "SolutionStacks[?contains(@, 'Docker') && contains(@, 'Amazon Linux 2023')] | [0]" --output text)
          echo "DOCKER_STACK=${STACK}" >> $GITHUB_OUTPUT
          echo "Found Docker stack: ${STACK}"
      
      - name: Check if environment exists
        id: check-env
        run: |
          if aws elasticbeanstalk describe-environments --application-name financial-docs --environment-names financial-docs-env --query "Environments[?Status!='Terminated'] | length(@)" --output text | grep -q "^0$"; then
            echo "Environment does not exist or is terminated"
            echo "ENV_EXISTS=false" >> $GITHUB_OUTPUT
          else
            echo "Environment exists"
            echo "ENV_EXISTS=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Create new environment if it doesn't exist
        if: steps.check-env.outputs.ENV_EXISTS == 'false'
        run: |
          echo "Creating new Elastic Beanstalk environment"
          aws elasticbeanstalk create-environment \
            --application-name financial-docs \
            --environment-name financial-docs-env \
            --version-label ${{ steps.upload.outputs.VERSION_LABEL }} \
            --solution-stack-name "${{ steps.stack.outputs.DOCKER_STACK }}" \
            --option-settings '[
              {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "FLASK_ENV", "Value": "production"},
              {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "PORT", "Value": "10000"},
              {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "USE_DYNAMODB", "Value": "true"},
              {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "DYNAMODB_REGION", "Value": "${{ secrets.AWS_REGION }}"},
              {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "DEFAULT_LANGUAGE", "Value": "he"},
              {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "HUGGINGFACE_API_KEY", "Value": "${{ secrets.HUGGINGFACE_API_KEY }}"},
              {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "SECRET_KEY", "Value": "28"},
              {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "JWT_SECRET", "Value": "210"},
              {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "SERVICE_NAME", "Value": "${{ secrets.SERVICE_NAME }}"}
            ]'
      
      - name: Update existing environment
        if: steps.check-env.outputs.ENV_EXISTS == 'true'
        run: |
          echo "Updating existing Elastic Beanstalk environment"
          aws elasticbeanstalk update-environment \
            --application-name financial-docs \
            --environment-name financial-docs-env \
            --version-label ${{ steps.upload.outputs.VERSION_LABEL }}
      
      - name: Wait for environment to be ready
        run: |
          echo "Waiting for environment to be ready..."
          MAX_ATTEMPTS=30
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            ATTEMPT=$((ATTEMPT+1))
            echo "Attempt $ATTEMPT/$MAX_ATTEMPTS..."
            
            STATUS=$(aws elasticbeanstalk describe-environments \
              --application-name financial-docs \
              --environment-names financial-docs-env \
              --query "Environments[0].Status" --output text)
            
            HEALTH=$(aws elasticbeanstalk describe-environments \
              --application-name financial-docs \
              --environment-names financial-docs-env \
              --query "Environments[0].Health" --output text)
            
            echo "Status: $STATUS, Health: $HEALTH"
            
            if [ "$STATUS" = "Ready" ]; then
              echo "Deployment successful! Environment is ready."
              
              # Get the environment URL
              URL=$(aws elasticbeanstalk describe-environments \
                --application-name financial-docs \
                --environment-names financial-docs-env \
                --query "Environments[0].CNAME" --output text)
              
              echo "Your application is available at: http://$URL"
              break
            elif [ "$STATUS" = "Launching" ] || [ "$STATUS" = "Updating" ]; then
              echo "Environment is still $STATUS, waiting 30 seconds..."
              sleep 30
            else
              echo "Environment is in state: $STATUS"
              echo "Continuing to wait..."
              sleep 30
            fi
          done
          
          if [ $ATTEMPT -ge $MAX_ATTEMPTS ]; then
            echo "Timed out waiting for environment to be ready"
            exit 1
          fi
