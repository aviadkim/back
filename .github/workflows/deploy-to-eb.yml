name: Deploy to AWS Elastic Beanstalk
on:
  push:
    branches: [ master ]
  workflow_dispatch:  # Allow manual triggering
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Generate deployment package
        run: zip -r deploy.zip . -x "*.git*" "venv/*" "__pycache__/*"
      
      - name: Get Docker solution stack
        id: solution-stack
        run: |
          STACK=$(aws elasticbeanstalk list-available-solution-stacks --query "SolutionStacks[?contains(@, 'Docker') && contains(@, 'Amazon Linux 2023')] | [0]" --output text)
          echo "DOCKER_STACK=${STACK}" >> $GITHUB_OUTPUT
          echo "Using Docker stack: ${STACK}"
      
      - name: Ensure application exists
        run: |
          aws elasticbeanstalk create-application \
            --application-name financial-docs \
            --description "Financial Documents Analysis Application" || true
      
      - name: Check if environment exists
        id: check-env
        run: |
          ENVIRONMENT_COUNT=$(aws elasticbeanstalk describe-environments \
            --application-name financial-docs \
            --environment-names financial-docs-env \
            --query "length(Environments)" \
            --output text)
          
          echo "Environment count: $ENVIRONMENT_COUNT"
          
          if [ "$ENVIRONMENT_COUNT" -gt "0" ]; then
            echo "Environment exists"
            echo "EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "Environment does not exist"
            echo "EXISTS=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create and deploy to new environment
        if: steps.check-env.outputs.EXISTS == 'false'
        run: |
          echo "Creating new environment financial-docs-env"
          
          # First, create a new application version
          aws elasticbeanstalk create-application-version \
            --application-name financial-docs \
            --version-label financial-docs-${{ github.sha }} \
            --source-bundle S3Bucket=elasticbeanstalk-${{ secrets.AWS_REGION }}-${{ github.run_id }},S3Key=financial-docs-${{ github.sha }}.zip
          
          # Upload the application package to S3
          aws s3 cp deploy.zip s3://elasticbeanstalk-${{ secrets.AWS_REGION }}-${{ github.run_id }}/financial-docs-${{ github.sha }}.zip
          
          # Create the environment with the version
          aws elasticbeanstalk create-environment \
            --application-name financial-docs \
            --environment-name financial-docs-env \
            --version-label financial-docs-${{ github.sha }} \
            --solution-stack-name "${{ steps.solution-stack.outputs.DOCKER_STACK }}" \
            --option-settings '[
              {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "FLASK_ENV", "Value": "production"},
              {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "PORT", "Value": "10000"},
              {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "USE_DYNAMODB", "Value": "true"},
              {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "DYNAMODB_REGION", "Value": "${{ secrets.AWS_REGION }}"},
              {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "DEFAULT_LANGUAGE", "Value": "he"},
              {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "HUGGINGFACE_API_KEY", "Value": "${{ secrets.HUGGINGFACE_API_KEY }}"},
              {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "SECRET_KEY", "Value": "28"},
              {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "JWT_SECRET", "Value": "210"},
              {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "SERVICE_NAME", "Value": "${{ secrets.SERVICE_NAME }}"}
            ]'
      
      - name: Deploy to existing environment
        if: steps.check-env.outputs.EXISTS == 'true'
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: financial-docs
          environment_name: financial-docs-env
          version_label: financial-docs-${{ github.sha }}
          region: ${{ secrets.AWS_REGION }}
          deployment_package: deploy.zip
          use_existing_version_if_available: false
          wait_for_environment_recovery: 300
