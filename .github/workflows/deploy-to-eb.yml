name: Deploy to AWS Elastic Beanstalk

on:
  push:
    branches: [ master ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      
      - name: Setup DynamoDB Tables
        run: |
          # Create financial_documents table if it doesn't exist
          aws dynamodb create-table \
            --table-name financial_documents \
            --attribute-definitions AttributeName=document_id,AttributeType=S \
            --key-schema AttributeName=document_id,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST \
            --region eu-central-1 || echo "Table financial_documents already exists"

          # Create document_analysis table if it doesn't exist
          aws dynamodb create-table \
            --table-name document_analysis \
            --attribute-definitions AttributeName=document_id,AttributeType=S \
            --key-schema AttributeName=document_id,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST \
            --region eu-central-1 || echo "Table document_analysis already exists"

          # Create chat_history table if it doesn't exist
          aws dynamodb create-table \
            --table-name chat_history \
            --attribute-definitions AttributeName=chat_id,AttributeType=S \
            --key-schema AttributeName=chat_id,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST \
            --region eu-central-1 || echo "Table chat_history already exists"
      
      - name: Create AWS Secrets if they don't exist
        run: |
          # Generate random secrets if they don't exist yet
          FLASK_SECRET_KEY=$(openssl rand -hex 24)
          JWT_SECRET=$(openssl rand -hex 24)
          
          # Create or update SSM parameters
          aws ssm put-parameter --name "SECRET_KEY" --value "$FLASK_SECRET_KEY" --type SecureString --overwrite --region eu-central-1 || true
          aws ssm put-parameter --name "JWT_SECRET" --value "$JWT_SECRET" --type SecureString --overwrite --region eu-central-1 || true
          aws ssm put-parameter --name "USE_DYNAMODB" --value "True" --type String --overwrite --region eu-central-1 || true
          aws ssm put-parameter --name "DYNAMODB_REGION" --value "eu-central-1" --type String --overwrite --region eu-central-1 || true
          
          # Add HuggingFace API key if provided as a secret
          if [ -n "${{ secrets.HUGGINGFACE_API_KEY }}" ]; then
            aws ssm put-parameter --name "HUGGINGFACE_API_KEY" --value "${{ secrets.HUGGINGFACE_API_KEY }}" --type SecureString --overwrite --region eu-central-1 || true
          fi
      
      - name: Create Elastic Beanstalk Application if it doesn't exist
        run: |
          # Check if application exists
          if ! aws elasticbeanstalk describe-applications --application-names financial-docs > /dev/null 2>&1; then
            echo "Creating Elastic Beanstalk application 'financial-docs'"
            aws elasticbeanstalk create-application --application-name financial-docs --description "Financial Documents Analysis Application"
          else
            echo "Application 'financial-docs' already exists"
          fi
      
      - name: Create .ebextensions directory
        run: |
          mkdir -p .ebextensions
          
          # Create configuration to load environment variables from SSM Parameter Store
          cat > .ebextensions/01-environment.config << 'EOF'
          option_settings:
            aws:elasticbeanstalk:application:environment:
              USE_DYNAMODB: true
              DYNAMODB_REGION: eu-central-1
              PORT: 10000
              FLASK_ENV: production
              PYTHONPATH: "/var/app/current:$PYTHONPATH"
            
            aws:elasticbeanstalk:container:python:
              WSGIPath: app:app
              
            aws:autoscaling:launchconfiguration:
              InstanceType: t2.micro
              
          container_commands:
            01_get_secrets:
              command: |
                aws ssm get-parameter --name "SECRET_KEY" --with-decryption --region eu-central-1 --query Parameter.Value --output text > /tmp/secret_key
                aws ssm get-parameter --name "JWT_SECRET" --with-decryption --region eu-central-1 --query Parameter.Value --output text > /tmp/jwt_secret
                aws ssm get-parameter --name "HUGGINGFACE_API_KEY" --with-decryption --region eu-central-1 --query Parameter.Value --output text > /tmp/huggingface_key || echo "No HuggingFace key found"
            
            02_set_env_vars:
              command: |
                echo "export SECRET_KEY=$(cat /tmp/secret_key)" >> /opt/elasticbeanstalk/deployment/env
                echo "export JWT_SECRET=$(cat /tmp/jwt_secret)" >> /opt/elasticbeanstalk/deployment/env
                [ -s /tmp/huggingface_key ] && echo "export HUGGINGFACE_API_KEY=$(cat /tmp/huggingface_key)" >> /opt/elasticbeanstalk/deployment/env
            
            03_cleanup:
              command: |
                rm -f /tmp/secret_key /tmp/jwt_secret /tmp/huggingface_key
          EOF
          
          # Create configuration for the application load balancer
          cat > .ebextensions/02-alb.config << 'EOF'
          option_settings:
            aws:elasticbeanstalk:environment:
              LoadBalancerType: application
          EOF
          
          # Create configuration for system packages
          cat > .ebextensions/03-packages.config << 'EOF'
          packages:
            yum:
              tesseract: []
              poppler-utils: []
            
          commands:
            01_install_tesseract:
              command: |
                if ! command -v tesseract &> /dev/null; then
                  amazon-linux-extras install epel -y
                  yum install -y tesseract tesseract-langpack-eng
                fi
          EOF
          
          # Create directories structure
          cat > .ebextensions/04-directories.config << 'EOF'
          commands:
            01_create_dirs:
              command: |
                mkdir -p /var/app/current/uploads /var/app/current/data/embeddings /var/app/current/data/templates /var/app/current/logs /var/app/current/templates
                chmod -R 755 /var/app/current/uploads /var/app/current/data /var/app/current/logs /var/app/current/templates
                chown -R webapp:webapp /var/app/current/uploads /var/app/current/data /var/app/current/logs /var/app/current/templates
          EOF
      
      - name: Create Procfile
        run: |
          echo "web: gunicorn --bind 0.0.0.0:\$PORT app:app" > Procfile
      
      - name: Check for existing environment
        id: check-env
        run: |
          if aws elasticbeanstalk describe-environments --application-name financial-docs --environment-names financial-docs-env | grep -q "financial-docs-env"; then
            echo "Environment exists"
            echo "env_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Environment does not exist"
            echo "env_exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Elastic Beanstalk environment if it doesn't exist
        if: steps.check-env.outputs.env_exists == 'false'
        run: |
          echo "Creating Elastic Beanstalk environment 'financial-docs-env'"
          aws elasticbeanstalk create-environment \
            --application-name financial-docs \
            --environment-name financial-docs-env \
            --solution-stack-name "64bit Amazon Linux 2 v3.5.4 running Python 3.8" \
            --option-settings '[
              {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "FLASK_ENV", "Value": "production"},
              {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "PORT", "Value": "10000"},
              {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "USE_DYNAMODB", "Value": "true"},
              {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "DYNAMODB_REGION", "Value": "eu-central-1"}
            ]'
      
      - name: Generate deployment package
        run: |
          zip -r deploy.zip . -x "*.git*" "*.github*" "node_modules/*" "*.zip" "venv/*"
      
      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: financial-docs
          environment_name: financial-docs-env
          version_label: financial-docs-${{ github.sha }}
          region: eu-central-1
          deployment_package: deploy.zip
          use_existing_version_if_available: false
          wait_for_environment_recovery: 300
      
      - name: Deployment information
        run: |
          echo "Deployment initiated. The deployment may take several minutes to complete."
          echo "You can check the deployment status in the AWS Elastic Beanstalk Console:"
          echo "https://eu-central-1.console.aws.amazon.com/elasticbeanstalk/home?region=eu-central-1#/environment/dashboard?applicationName=financial-docs&environmentId=financial-docs-env"
          echo ""
          echo "Once deployment is complete, your app will be available at:"
          URL=$(aws elasticbeanstalk describe-environments --application-name financial-docs --environment-name financial-docs-env --query "Environments[0].CNAME" --output text)
          echo "http://$URL"
