name: Deploy to AWS Lightsail with DynamoDB

on:
  push:
    branches: [ master ]
  workflow_dispatch:  # Allow manual triggering

env:
  SERVICE_NAME: financial-docs

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-flask
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Run basic tests
        run: |
          mkdir -p uploads data/embeddings data/templates logs
          python -m pytest tests/test_app.py -v || echo "Some tests failed but continuing deployment"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      
      - name: Install AWS CLI and Lightsail plugin
        run: |
          # Use existing AWS CLI if available 
          if ! aws --version &> /dev/null; then
            echo "Installing AWS CLI..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          else
            echo "AWS CLI is already installed"
          fi
          
          aws --version
          
          # Install Lightsail Control Plugin
          sudo curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "/usr/local/bin/lightsailctl"
          sudo chmod +x /usr/local/bin/lightsailctl
      
      - name: Setup DynamoDB Tables
        run: |
          # Create financial_documents table if it doesn't exist
          aws dynamodb create-table \
            --table-name financial_documents \
            --attribute-definitions AttributeName=document_id,AttributeType=S \
            --key-schema AttributeName=document_id,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST \
            --region eu-central-1 || echo "Table financial_documents already exists"

          # Create document_analysis table if it doesn't exist
          aws dynamodb create-table \
            --table-name document_analysis \
            --attribute-definitions AttributeName=document_id,AttributeType=S \
            --key-schema AttributeName=document_id,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST \
            --region eu-central-1 || echo "Table document_analysis already exists"

          # Create chat_history table if it doesn't exist
          aws dynamodb create-table \
            --table-name chat_history \
            --attribute-definitions AttributeName=chat_id,AttributeType=S \
            --key-schema AttributeName=chat_id,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST \
            --region eu-central-1 || echo "Table chat_history already exists"
      
      - name: Create Lightsail Container Service if it doesn't exist
        run: |
          # Check if the service exists
          if ! aws lightsail get-container-services --service-name "${{ env.SERVICE_NAME }}" --region eu-central-1 > /dev/null 2>&1; then
            echo "Creating Lightsail Container Service..."
            aws lightsail create-container-service \
              --service-name "${{ env.SERVICE_NAME }}" \
              --power micro \
              --scale 1 \
              --region eu-central-1
            
            # Wait for the service to be ready (this can take a few minutes)
            echo "Waiting for the container service to be ready..."
            sleep 30
            
            # Check service state
            STATE=$(aws lightsail get-container-services --service-name "${{ env.SERVICE_NAME }}" --region eu-central-1 --query 'containerServices[0].state' --output text)
            echo "Service state: $STATE"
          else
            echo "Container service ${{ env.SERVICE_NAME }} already exists."
          fi
      
      - name: Check for running deployment
        id: check-deployment
        run: |
          CURRENT_STATE=$(aws lightsail get-container-services --service-name "${{ env.SERVICE_NAME }}" --region eu-central-1 --query 'containerServices[0].state' --output text)
          echo "Current service state: $CURRENT_STATE"
          
          if [ "$CURRENT_STATE" == "DEPLOYING" ]; then
            echo "Deployment already in progress. Will wait for it to complete."
            echo "deployment_in_progress=true" >> $GITHUB_OUTPUT
            
            # Wait for the deployment to complete (max 5 minutes)
            for i in {1..30}; do
              echo "Checking deployment status ($i/30)..."
              CURRENT_STATE=$(aws lightsail get-container-services --service-name "${{ env.SERVICE_NAME }}" --region eu-central-1 --query 'containerServices[0].state' --output text)
              
              if [ "$CURRENT_STATE" != "DEPLOYING" ]; then
                echo "Deployment completed with state: $CURRENT_STATE"
                echo "deployment_in_progress=false" >> $GITHUB_OUTPUT
                break
              fi
              
              sleep 10
            done
          else
            echo "No deployment in progress."
            echo "deployment_in_progress=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Build and push container image
        if: steps.check-deployment.outputs.deployment_in_progress == 'false'
        run: |
          # Build the Docker image
          docker build -t "${{ env.SERVICE_NAME }}-app" .
          
          # Push the image to AWS Lightsail
          aws lightsail push-container-image \
            --region eu-central-1 \
            --service-name "${{ env.SERVICE_NAME }}" \
            --label app \
            --image "${{ env.SERVICE_NAME }}-app"
          
          # Get the latest image
          IMAGE_TAG=$(aws lightsail get-container-images --service-name "${{ env.SERVICE_NAME }}" --region eu-central-1 --query 'containerImages[0].image' --output text)
          echo "Latest image: $IMAGE_TAG"
      
      - name: Deploy to Lightsail
        if: steps.check-deployment.outputs.deployment_in_progress == 'false'
        run: |
          # Generate a random secret key for Flask
          FLASK_SECRET_KEY=$(openssl rand -hex 24)
          JWT_SECRET=$(openssl rand -hex 24)
          
          # Get the latest image
          IMAGE_TAG=$(aws lightsail get-container-images --service-name "${{ env.SERVICE_NAME }}" --region eu-central-1 --query 'containerImages[0].image' --output text)
          
          # Create JSON for container definition including all environment variables
          echo "Creating container definition with environment variables..."
          CONTAINER_JSON="{\"app\":{\"image\":\"$IMAGE_TAG\",\"ports\":{\"10000\":\"HTTP\"},\"environment\":{\"FLASK_ENV\":\"production\",\"PORT\":\"10000\",\"SECRET_KEY\":\"$FLASK_SECRET_KEY\",\"JWT_SECRET\":\"$JWT_SECRET\",\"DEFAULT_LANGUAGE\":\"he\",\"USE_DYNAMODB\":\"true\",\"DYNAMODB_REGION\":\"eu-central-1\""
          
          if [ -n "${{ secrets.HUGGINGFACE_API_KEY }}" ]; then
            # Add HuggingFace API key and LLM provider if available
            CONTAINER_JSON="$CONTAINER_JSON,\"HUGGINGFACE_API_KEY\":\"${{ secrets.HUGGINGFACE_API_KEY }}\",\"LLM_PROVIDER\":\"huggingface\""
          fi
          
          # Close the JSON structure
          CONTAINER_JSON="$CONTAINER_JSON}}}"
          
          # Create JSON for public endpoint
          ENDPOINT_JSON="{\"containerName\":\"app\",\"containerPort\":10000,\"healthCheck\":{\"path\":\"/health\",\"intervalSeconds\":10,\"timeoutSeconds\":5,\"successCodes\":\"200\",\"unhealthyThreshold\":2,\"healthyThreshold\":2}}"
          
          # Deploy the container
          echo "Deploying container with image: $IMAGE_TAG"
          aws lightsail create-container-service-deployment \
            --service-name "${{ env.SERVICE_NAME }}" \
            --region eu-central-1 \
            --containers "$CONTAINER_JSON" \
            --public-endpoint "$ENDPOINT_JSON"
      
      - name: Deployment information
        run: |
          echo "Deployment initiated. The deployment may take several minutes to complete."
          echo "You can check the deployment status in the AWS Lightsail Console:"
          echo "https://lightsail.aws.amazon.com/ls/webapp/home/containers"
          echo ""
          echo "Once deployment is complete, your app will be available at:"
          aws lightsail get-container-services --service-name "${{ env.SERVICE_NAME }}" --region eu-central-1 --query 'containerServices[0].url' --output text || echo "Unable to get URL yet. Please check the AWS Lightsail Console."
