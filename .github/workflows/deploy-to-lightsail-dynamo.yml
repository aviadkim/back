name: Deploy to AWS Lightsail with DynamoDB

on:
  push:
    branches: [ master ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Install AWS CLI and Lightsail plugin
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          aws --version
          # Install Lightsail Control Plugin
          sudo curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "/usr/local/bin/lightsailctl"
          sudo chmod +x /usr/local/bin/lightsailctl
      
      - name: Setup DynamoDB Tables
        run: |
          # Create financial_documents table if it doesn't exist
          aws dynamodb create-table \
            --table-name financial_documents \
            --attribute-definitions AttributeName=document_id,AttributeType=S \
            --key-schema AttributeName=document_id,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST \
            --region ${{ secrets.AWS_REGION }} || echo "Table financial_documents already exists"

          # Create document_analysis table if it doesn't exist
          aws dynamodb create-table \
            --table-name document_analysis \
            --attribute-definitions AttributeName=document_id,AttributeType=S \
            --key-schema AttributeName=document_id,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST \
            --region ${{ secrets.AWS_REGION }} || echo "Table document_analysis already exists"

          # Create chat_history table if it doesn't exist
          aws dynamodb create-table \
            --table-name chat_history \
            --attribute-definitions AttributeName=chat_id,AttributeType=S \
            --key-schema AttributeName=chat_id,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST \
            --region ${{ secrets.AWS_REGION }} || echo "Table chat_history already exists"
      
      - name: Create AWS Secrets if they don't exist
        run: |
          # Generate random secrets if they don't exist yet
          FLASK_SECRET_KEY=$(openssl rand -hex 24)
          JWT_SECRET=$(openssl rand -hex 24)
          
          # Create or update SSM parameters
          aws ssm put-parameter --name "SECRET_KEY" --value "$FLASK_SECRET_KEY" --type SecureString --overwrite --region ${{ secrets.AWS_REGION }} || true
          aws ssm put-parameter --name "JWT_SECRET" --value "$JWT_SECRET" --type SecureString --overwrite --region ${{ secrets.AWS_REGION }} || true
          aws ssm put-parameter --name "USE_DYNAMODB" --value "True" --type String --overwrite --region ${{ secrets.AWS_REGION }} || true
          aws ssm put-parameter --name "DYNAMODB_REGION" --value "${{ secrets.AWS_REGION }}" --type String --overwrite --region ${{ secrets.AWS_REGION }} || true
          
          # Add HuggingFace API key if provided as a secret
          if [ -n "${{ secrets.HUGGINGFACE_API_KEY }}" ]; then
            aws ssm put-parameter --name "HUGGINGFACE_API_KEY" --value "${{ secrets.HUGGINGFACE_API_KEY }}" --type SecureString --overwrite --region ${{ secrets.AWS_REGION }} || true
          fi
      
      - name: Create Lightsail Container Service if it doesn't exist
        run: |
          # Check if the service exists
          if ! aws lightsail get-container-services --service-name ${{ secrets.SERVICE_NAME }} > /dev/null 2>&1; then
            echo "Creating Lightsail Container Service..."
            aws lightsail create-container-service \
              --service-name ${{ secrets.SERVICE_NAME }} \
              --power micro \
              --scale 1 \
              --region ${{ secrets.AWS_REGION }}
            
            # Wait for the service to be ready (this can take a few minutes)
            echo "Waiting for the container service to be ready..."
            aws lightsail wait container-service-state --service-name ${{ secrets.SERVICE_NAME }} --state ACTIVE
          else
            echo "Container service ${{ secrets.SERVICE_NAME }} already exists."
          fi
      
      - name: Build and push container image
        run: |
          # Build the Docker image
          docker build -t ${{ secrets.SERVICE_NAME }}-app .
          
          # Push the image to AWS Lightsail
          aws lightsail push-container-image \
            --region ${{ secrets.AWS_REGION }} \
            --service-name ${{ secrets.SERVICE_NAME }} \
            --label app \
            --image ${{ secrets.SERVICE_NAME }}-app
          
          # Get the latest image
          IMAGE_TAG=$(aws lightsail get-container-images --service-name ${{ secrets.SERVICE_NAME }} --query 'containerImages[0].image' --output text)
          echo "Latest image: $IMAGE_TAG"
          
          # Deploy the container
          aws lightsail create-container-service-deployment \
            --service-name ${{ secrets.SERVICE_NAME }} \
            --region ${{ secrets.AWS_REGION }} \
            --containers "{\"app\":{\"image\":\"$IMAGE_TAG\",\"ports\":{\"10000\":\"HTTP\"},\"environment\":{\"FLASK_ENV\":\"production\",\"PORT\":\"10000\",\"HUGGINGFACE_API_KEY\":\"{{ssm:HUGGINGFACE_API_KEY}}\",\"SECRET_KEY\":\"{{ssm:SECRET_KEY}}\",\"JWT_SECRET\":\"{{ssm:JWT_SECRET}}\",\"USE_DYNAMODB\":\"true\",\"DYNAMODB_REGION\":\"${{ secrets.AWS_REGION}}\"}}}" \
            --public-endpoint "{\"containerName\":\"app\",\"containerPort\":10000,\"healthCheck\":{\"path\":\"/health\",\"intervalSeconds\":10,\"timeoutSeconds\":5,\"successCodes\":\"200\",\"unhealthyThreshold\":2,\"healthyThreshold\":2}}"
      
      - name: Deployment information
        run: |
          echo "Deployment initiated. The deployment may take several minutes to complete."
          echo "You can check the deployment status in the AWS Lightsail Console:"
          echo "https://lightsail.aws.amazon.com/ls/webapp/home/containers"
          echo ""
          echo "Once deployment is complete, your app will be available at:"
          aws lightsail get-container-services --service-name ${{ secrets.SERVICE_NAME }} --query 'containerServices[0].url' --output text
